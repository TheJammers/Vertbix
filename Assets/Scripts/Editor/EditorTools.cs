using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEditor;
using UnityEngine;

public class EditorTools : EditorWindow
{
    private string wagonID;

    [MenuItem("Tools/EditorTools")]
    // Start is called before the first frame update
    static void Init()
    {
        var window = EditorWindow.GetWindow(typeof(EditorTools));
        window.titleContent = new GUIContent("EditorTools");
        window.Show();
    }

    void OnGUI()
    {
        if (GUILayout.Button("Clear Save"))
        {
            PlayerPrefs.DeleteAll();
        }

        GUILayout.Space(20);
        GUILayout.Label("Wagon ID:");
        wagonID = GUILayout.TextField(wagonID);
        if (GUILayout.Button("Add Wagon"))
        {
            var wagon = GameManager.Instance.WagonData.FirstOrDefault(w => w.ID == wagonID);
            if (wagon != null)
            {
                FindObjectOfType<Vehicle>().AddWagon(SerialisationUtility.DeserialiseWagon(wagon));
            }
            else
            {
                Debug.LogError("Cant find wagon for name: " + wagonID);
            }
        }

        if (GUILayout.Button("GenerateEnums"))
        {
            EnumGenerator.GenerateEnumFile();
        }
    }

    public class EnumGenerator : AssetPostprocessor
    {
        public static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets,
            string[] movedAssets, string[] movedFromAssetPaths)
        {
            var allChangedFiles = importedAssets.Concat(deletedAssets).Concat(movedAssets).Concat(movedFromAssetPaths);

            if (allChangedFiles.Any(x => x.Contains("Assets/Resources/Data")))
            {
                GenerateEnumFile();
            }
        }
        
        public static void GenerateEnumFile()
        {
            string generatedEnumPath = Application.dataPath + @"\Scripts\Utils\GeneratedEnums.cs";
            Debug.Log("Generated Enum File: " + generatedEnumPath);
            
            var wagonNames =
                GenerateEnumFile("WagonNames",
                    Resources.LoadAll<WagonData>("Data/WagonData").Select(x => x.ID).ToList());
            var towerNames = GenerateEnumFile("TowerNames",
                Resources.LoadAll<TowerData>("Data/TowerData").Select(x => x.ID).ToList());
            
            var fileContents =
                "//This file is generated by the EnumGenerator AssetPostprocessor.\n//It should not be changed by hand\n" +
                string.Join("\n\n", new List<string>() {wagonNames, towerNames});

            if (!System.IO.File.Exists(generatedEnumPath))
            {
                System.IO.File.Create(generatedEnumPath);
                System.IO.File.WriteAllText(generatedEnumPath, fileContents);
            }
            else
            {
                if (System.IO.File.ReadAllText(generatedEnumPath) != fileContents)
                {
                    System.IO.File.WriteAllText(generatedEnumPath, fileContents);
                }
            }
        }

        private static string GenerateEnumFile(string name, List<string> items)
        {
            var enumContents = string.Join(",\n    ", items);

            return "public enum " + name + "\n{\n    " + enumContents + "\n}";
        }
    }
}